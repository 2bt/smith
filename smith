#!/usr/bin/python3.6
import asyncio
import signal
import html
import sys
import json
import os

from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont
from quamash import QEventLoop

#print("Platform:", sys.platform)


# TODO: make config nice
pool_addr  = "78.46.85.142"
pool_port  = 35349
local_port = 55555
config = {
	"font-size": 10,
	"login": "rig2",
	"pass": "x",
	"log-file": "log.txt",
}
supported_algos = {
	"monero_v7",
	"heavy",
}


def to_json(o):
	return json.dumps(o)

def to_pretty_json(o):
	return json.dumps(o, indent=2, sort_keys=True)

def from_json(s):
	return json.loads(s)



class LogWin(QPlainTextEdit):
	def __init__(self):
		QPlainTextEdit.__init__(self)
		self.setReadOnly(True)
		font = QFont("Monospace", config["font-size"])
		self.setFont(font)
		self.setLineWrapMode(0)
		self.setMaximumBlockCount(1000)
		self.file = open(config["log-file"], "w")

	def miner_log(self, text):
		for line in text.rstrip().split("\n"):
			self.appendHtml("<pre><b><font color='#800'>miner: </font></b>" + html.escape(line) + "</pre>")
			#self.appendHtml("<pre style='background-color:#ccc'>" + html.escape(line) + "</pre>")
			self.file.write("miner: " + line + "\n")
			print("\033[35mminer:\033[m", line)
		self.verticalScrollBar().setValue(self.verticalScrollBar().maximum())

	def proxy_log(self, text):
		for line in text.rstrip().split("\n"):
			self.appendHtml("<pre><b><font color='#008'>proxy: </font></b>" + html.escape(line) + "</pre>")
			#self.appendHtml("<pre>" + html.escape(line) + "</pre>")
			self.file.write("proxy: " + line + "\n")
			print("\033[33mproxy:\033[m", line)
		self.verticalScrollBar().setValue(self.verticalScrollBar().maximum())


class MainWin(QWidget):
	def __init__(self, app):
		QWidget.__init__(self)
		self.app = app
		self.log_win = LogWin()
		hbox = QHBoxLayout()
		vbox = QVBoxLayout()

		# buttons
		for label, data in [
			("hashrate", "h"),
			("results", "r"),
			("connection", "c")
		]:
			b = QPushButton(label)
			def on_clicked_factory(label, data):
				def on_clicked():
					if self.app.proc:
						self.log_win.proxy_log("send %r to miner process." % data)
						self.app.proc.stdin.write(data.encode())
					else:
						self.log_win.proxy_log("error: miner process not running.")
				return on_clicked
			b.clicked.connect(on_clicked_factory(label, data))
			hbox.addWidget(b)

		hbox.addStretch(1)
		vbox.addWidget(self.log_win)
		vbox.addLayout(hbox)

		self.resize(1000, 800)
		self.setWindowTitle("Smith")
		self.setLayout(vbox)
		self.show()

	def closeEvent(self, event):
		event.ignore()
		self.app.close()

class App:
	def __init__(self, loop):
		self.loop = loop
		self.proc = None
		self.algo = None

		self.server = None
		self.miner_writer = None
		self.miner_state = "off"

		# gui and loggin methods
		self.main_win = MainWin(self)
		self.miner_log = self.main_win.log_win.miner_log
		self.proxy_log = self.main_win.log_win.proxy_log

		# signal
		def on_sigint():
			self.proxy_log("received signal SIGINT.")
			self.close()
		self.loop.add_signal_handler(signal.SIGINT, on_sigint)


		# pool
		self.pool_writer = None
		self.pool_restart_on_disconnect = True
		self.pool_task = self.loop.create_task(self.pool_coro())


	def run(self):
		with self.loop: self.loop.run_forever()

		# close log file
		self.proxy_log("bye.")
		self.main_win.log_win.file.close()


	def close(self):
		async def terminate_coro():
			self.pool_restart_on_disconnect = False
			if self.pool_writer: self.pool_writer.close()
			await self.pool_task
			await self.stop_miner_coro()
			self.loop.stop()
		self.proxy_log("exiting...")
		self.loop.create_task(terminate_coro())


	async def pool_coro(self):

		self.proxy_log("connecting to pool %s..." % str((pool_addr, pool_port)))
		try:
			reader, writer = await asyncio.open_connection(pool_addr, pool_port)
		except Exception as e:
			self.proxy_log("error connecting to pool: %s." % e.strerror)
			return

		self.proxy_log("connected to pool.")
		self.pool_writer = writer

		if self.algo == None:
			self.proxy_log("sending fake login to pool:")
			login = {
				"id": 1,
				"method": "login",
				"params": {
					"agent": "smith/0.0.1",
					"login": config["login"],
					"pass": config["pass"],
				}
			}
			self.proxy_log(to_pretty_json(login))
			writer.write((to_json(login) + "\n").encode())
		else:
			# start server and run miner
			assert self.proc   == None
			assert self.server == None
			self.server_task = self.loop.create_task(self.run_server_coro())

		while True:
			line = await reader.readline()
			if not line: break
			line = line.decode()
			o = from_json(line)
			self.proxy_log("pool says:")
			self.proxy_log(to_pretty_json(o))

			# find algorithm
			algo = None
			if "result" in o and "job" in o["result"] and "algo" in o["result"]["job"]:
				algo = o["result"]["job"]["algo"]
				del o["result"]["job"]["algo"]
			elif o.get("method") == "job" and "algo" in o["params"]:
				algo = o["params"]["algo"]
				del o["params"]["algo"]

			if algo and algo != self.algo:
				self.proxy_log("algorithm has changed from %s to %s." % (self.algo, algo))
				self.algo = algo
				if self.algo not in supported_algos:
					self.proxy_log("algorithm is not supported.")
					await self.stop_miner_coro()
					continue
				else:
					self.proxy_log("algorithm is supported.")
					break


			# pass data to to miner
			if self.miner_writer:
				self.miner_writer.write((to_json(o) + "\n").encode())

		self.proxy_log("disconnected from pool.")
		writer.close()

		# restart
		if self.pool_restart_on_disconnect:
			await self.stop_miner_coro()
			self.pool_task = self.loop.create_task(self.pool_coro())



	async def run_server_coro(self):
		async def on_connected(reader, writer):
			addr = writer.get_extra_info('peername')
			self.proxy_log("miner connected %s." % str(addr))
			self.server.close()

			self.miner_writer = writer
			while True:
				line = await reader.readline()
				if not line: break
				line = line.decode()
				o = from_json(line)
				self.proxy_log("miner says:")
				self.proxy_log(to_pretty_json(o))

				# find algorithm
				if o.get("method") == "login":
					o["params"]["login"] = config["login"]
					o["params"]["pass"] = config["pass"]

				# pass data to pool
				self.pool_writer.write((to_json(o) + "\n").encode())

			if self.miner_state == "stopping":
				self.proxy_log("miner disconnected.")
			else:
				self.proxy_log("error: miner disconnected unexpectedly.")
			writer.close()
			self.miner_writer = None

		local_addr = "127.0.0.1"
		self.proxy_log("listening for miner to connect %s..." % str((local_addr, local_port)))
		self.server = await asyncio.start_server(on_connected, local_addr, local_port, backlog=1)

		self.miner_task = self.loop.create_task(self.run_miner_coro())

		await self.server.wait_closed()
		self.server = None


	async def run_miner_coro(self):
		assert self.algo in supported_algos
		assert self.miner_state == "off"

		self.proxy_log("starting miner process...")
		self.proc = await asyncio.create_subprocess_exec(
			"./xmr-stak",
			cwd=os.path.join(".", "miners", self.algo),
			stdin=asyncio.subprocess.PIPE,
			stdout=asyncio.subprocess.PIPE)
		self.proxy_log("miner process running.")
		self.miner_state = "on"
		while True:
			line = await self.proc.stdout.readline()
			if not line: break
			line = line.decode()
			self.miner_log(line.rstrip())
		await self.proc.wait()
		if self.miner_state == "stopping":
			self.proxy_log("miner process stopped (%d)." % self.proc.returncode)
		else:
			self.proxy_log("error: miner process stopped unexpectedly (%d)." % self.proc.returncode)
			# close pool to toggle restart
			self.pool_writer.close()
		self.miner_state = "off"
		self.proc = None


	async def stop_miner_coro(self):
		if self.proc and not self.proc.returncode:
			assert self.miner_state == "on"
			self.miner_state = "stopping"
			self.proxy_log("stopping miner process...")
			self.proc.send_signal(signal.SIGINT)
			await self.miner_task
			await self.server_task


if __name__ == "__main__":
	qt = QApplication(sys.argv)
	loop = QEventLoop(qt)
	loop.set_debug(True)
	asyncio.set_event_loop(loop)
	app = App(loop)
	app.run()
